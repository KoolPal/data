name: iCarry Tracking Scraper

on:
  schedule:
    - cron: "38 * * * *"
  push:
    branches: [ master ]
  pull_request:
    branches:
  workflow_dispatch:
    branches:
    inputs:
      tracking_number:
        description: 'Tracking number to scrape'
        required: true
        default: '347720741487'

jobs:
  build:
    env:
      PY_COLORS: "1"
      PYTHONUNBUFFERED: "1"
      DISPLAY: ":99.0"
      
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set Locale
      run: |
        sudo apt-get update
        sudo apt-get install -y tzdata locales xvfb
        sudo locale-gen en_US.UTF-8
        sudo localectl set-locale LANG="en_US.UTF-8"
        export LANG="en_US.UTF-8"
        sudo update-locale
        locale -a
        locale
        locale -c -k LC_NUMERIC
        localectl status
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install seleniumbase>=4.22.5
        pip install --upgrade pyautogui
        pip install --upgrade python-xlib
        pip install undetected-chromedriver
    
    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase
    
    - name: Install chromedriver
      run: |
        seleniumbase install chromedriver
    
    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py --uc
    
    - name: Check which Chrome binaries exist
      run: |
        python -c "import os; print(os.path.exists('/usr/bin/google-chrome'))"
        python -c "import os; print(os.path.exists('/bin/google-chrome-stable'))"
        python -c "import os; print(os.path.exists('/bin/chromium-browser'))"
        python -c "import os; print(os.path.exists('/bin/chromium'))"
    
    - name: Display Chrome binary that's used
      run: |
        python -c "from seleniumbase.core import detect_b_ver; print(detect_b_ver.get_binary_location('google-chrome'))"
        python -c "from seleniumbase import undetected; print(undetected.find_chrome_executable())"

    - name: Start Xvfb
      run: |
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3
        echo "DISPLAY=$DISPLAY"
        xdpyinfo > /dev/null 2>&1 || echo "Failed to query display info"

    - name: Create Python script
      run: |
        cat > scrape_tracking.py << 'EOL'
        from seleniumbase import Driver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.common.exceptions import TimeoutException
        import time
        import re
        import os
        import argparse

        def extract_content(content, pattern):
            match = re.search(pattern, content)
            return match.group(1) if match else None

        def create_driver(debug=False):
            arguments = [
                '--no-sandbox',
                '--disable-gpu',
                '--disable-dev-shm-usage',
                '--window-size=1920,1080',
                '--disable-blink-features=AutomationControlled',
                '--disable-blink-features',
                f'user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
            ]
            
            if not debug:
                arguments.append('--headless')
            
            return Driver(uc=True,
                        headless=not debug,
                        agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
                        incognito=True,
                        undetectable=True,
                        headed=debug,
                        browser='chrome',
                        chromium_arg=' '.join(arguments))

        def wait_for_cloudflare(driver, debug=False):
            try:
                if debug:
                    print("Checking for Cloudflare challenge...")
                
                # Wait for potential Cloudflare challenge to pass
                for _ in range(30):
                    if "challenge-platform" in driver.page_source or "cf-" in driver.page_source:
                        if debug:
                            print("Cloudflare detected, waiting...")
                        time.sleep(1)
                    else:
                        if debug:
                            print("No Cloudflare challenge detected or challenge passed")
                        break
                    
                time.sleep(3)
                
            except Exception as e:
                if debug:
                    print(f"Error during Cloudflare wait: {str(e)}")
                raise

        def scrape_tracking_info(tracking_number, debug=False):
            driver = None
            max_retries = 3
            current_retry = 0
            
            while current_retry < max_retries:
                try:
                    if debug:
                        print(f"Attempt {current_retry + 1} of {max_retries}")
                    
                    driver = create_driver(debug)
                    
                    url = f"https://www.icarry.in/track-shipment?a={tracking_number}"
                    if debug:
                        print(f"Navigating to: {url}")
                        print("Driver configuration:")
                        print(f"User Agent: {driver.execute_script('return navigator.userAgent;')}")
                        print(f"Window size: {driver.execute_script('return [window.innerWidth, window.innerHeight];')}")
                    
                    driver.get(url)
                    wait_for_cloudflare(driver, debug)
                    
                    if debug:
                        print("Waiting for status element...")
                    
                    wait = WebDriverWait(driver, 20)
                    status_element = wait.until(
                        EC.presence_of_element_located((By.XPATH, "//b[contains(text(),'Status:')]/following-sibling::span"))
                    )
                    
                    if debug:
                        print("Status element found!")
                    
                    page_content = driver.page_source
                    
                    if "Shipment Tracking" not in page_content:
                        raise Exception("Invalid page content - missing expected elements")
                    
                    courier_name = extract_content(page_content, r'Courier Name\s*:</td>\s*<td>(.*?)</td>')
                    status = extract_content(page_content, r'Status:\s*</b>\s*<span[^>]*>(.*?)</span>')
                    estimated_delivery = extract_content(page_content, r'Estimated Delivery:\s*</b>\s*<span[^>]*>(.*?)</span>')
                    destination = extract_content(page_content, r'Destination:\s*</b>\s*<span[^>]*>(.*?)</span>')
                    
                    if not any([courier_name, status, estimated_delivery, destination]):
                        raise Exception("Failed to extract tracking information")
                    
                    print("\n=== Tracking Results ===")
                    print(f"Tracking Number: {tracking_number}")
                    print(f"Courier: {courier_name}")
                    print(f"Status: {status}")
                    print(f"Estimated Delivery: {estimated_delivery}")
                    print(f"Destination: {destination}")
                    
                    tracking_rows = driver.find_elements(By.XPATH, "//table[.//b[contains(text(),'Date')]]/tbody/tr")
                    
                    print("\n=== Tracking Timeline ===")
                    for row in tracking_rows:
                        cells = row.find_elements(By.TAG_NAME, "td")
                        if len(cells) >= 3:
                            print(f"{cells[0].text} | {cells[1].text} | {cells[2].text}")
                    
                    break
                    
                except Exception as e:
                    current_retry += 1
                    if debug:
                        print(f"Error occurred: {str(e)}")
                        if driver:
                            try:
                                print("Browser details:")
                                print(f"User Agent: {driver.execute_script('return navigator.userAgent;')}")
                                print(f"Current URL: {driver.current_url}")
                                print(f"Page source preview: {driver.page_source[:500]}...")
                            except:
                                print("Could not get browser details")
                    
                    if current_retry < max_retries:
                        print(f"Retrying... ({current_retry + 1}/{max_retries})")
                        time.sleep(5)
                    else:
                        print("Maximum retries reached. Failed to scrape tracking information.")
                        raise
                
                finally:
                    if driver:
                        if debug:
                            print("Closing browser...")
                        try:
                            driver.quit()
                        except:
                            pass

        if __name__ == "__main__":
            parser = argparse.ArgumentParser()
            parser.add_argument('--debug', action='store_true', help='Enable debug mode')
            args = parser.parse_args()
            
            tracking_number = os.getenv('TRACKING_NUMBER', '347720741487')
            scrape_tracking_info(tracking_number, debug=args.debug)
        EOL

    - name: Run scraper
      env:
        TRACKING_NUMBER: ${{ github.event.inputs.tracking_number || '347720741487' }}
      run: |
        python -u scrape_tracking.py --debug
